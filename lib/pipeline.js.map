{"version":3,"sources":["pipeline.js"],"names":[],"mappings":"AAAA;;;;;;;;;AACA;;;;AACA;;;;AACA;;AAIA;;;;AACA;;;;AACA;;;;;;;;;;;;IAIM;;;;;AAIJ,WAJI,iBAIJ,GAAc;0BAJV,mBAIU;;AACZ,SAAK,OAAL,GAAe,iBAAO,KAAP,CAAa;AAC1B,WAAK,KAAK,WAAL,CAAiB,IAAjB;KADQ,CAAf,CADY;GAAd;;eAJI;;kCASU,KAAK,SAAS;AAC1B,aAAO,wBAAiB,YAAjB,CAA8B;AACjC,aAAK,GAAL;AACA,qBAAa,QAAQ,WAAR,IAAuB,MAAvB;AACb,qBAAa,QAAQ,WAAR,CAAoB,GAApB;OAHV,EAKJ,IALI,CAKC,UAAC,QAAD,EAAc;AAClB,YAAI,CAAC,QAAD,EAAW;AACb,gBAAM,IAAI,iBAAO,SAAP,CAAiB,OAAjB,CAAyB,YAAzB,CAAsC,oCAAoC,GAApC,CAAhD,CADa;SAAf;AAGA,iBAAS,QAAT,GAAoB,SAAS,QAAT,IAAqB,EAArB,CAJF;AAKlB,iBAAS,QAAT,CAAkB,aAAlB,GAAkC,QAAQ,WAAR,CAAoB,EAApB,CALhB;AAMlB,iBAAS,QAAT,CAAkB,eAAlB,GAAoC,QAAQ,WAAR,CAAoB,IAApB,CANlB;AAOlB,YAAI,QAAQ,WAAR,IAAuB,QAAQ,WAAR,CAAoB,QAApB,IAAgC,QAAQ,WAAR,CAAoB,QAApB,CAA6B,MAA7B,EAAqC;AAC9F,mBAAS,QAAT,CAAkB,cAAlB,GAAmC,QAAQ,WAAR,CAAoB,QAApB,CAA6B,MAA7B,CAD2D;SAAhG;AAGA,eAAO,QAAP,CAVkB;OAAd,CALR,CAD0B;;;;;;;;;;;kCAyBd,KAAK;;;AACjB,aAAO,QAAQ,OAAR,GAAkB,IAAlB,CAAuB,YAAM;AAClC,eAAO,kBAAQ,GAAR,GACJ,IADI,CACC,UAAC,OAAD,EAAa;AACjB,iBAAO,MAAK,aAAL,CAAmB,GAAnB,EAAwB,OAAxB,EACJ,IADI,CACC,UAAC,QAAD,EAAc;AAClB,gBAAI,QAAQ,oBAAmB,QAAnB,CAAR,CADc;AAElB,mBAAO,MAAM,IAAN,CAAW,OAAX,EAAoB,IAApB,CAAyB,YAAM;AACpC,qBAAO,KAAP,CADoC;aAAN,CAAhC,CAFkB;WAAd,CADR,CADiB;SAAb,CADR,CADkC;OAAN,CAA9B,CADiB;;;;SAlCf;;;QAmDa;kBAIX","file":"pipeline.js","sourcesContent":["'use strict';\nimport ConnectorProxy from './proxy';\nimport Context from '@hoist/context';\nimport {\n  ConnectorSetting\n}\nfrom '@hoist/model';\nimport Errors from '@hoist/errors';\nimport logger from '@hoist/logger';\nimport Authorization from './authorization';\n/**\n * Pipeline object for interaction with connectors\n */\nclass ConnectorPipeline {\n  /**\n   * create a new ConnectorPipeline object\n   */\n  constructor() {\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n  _loadSettings(key, context) {\n    return ConnectorSetting.findOneAsync({\n        key: key,\n        environment: context.environment || 'live',\n        application: context.application._id\n      })\n      .then((settings) => {\n        if (!settings) {\n          throw new Errors.connector.request.InvalidError('no settings found with the key ' + key);\n        }\n        settings.settings = settings.settings || {};\n        settings.settings.applicationId = context.application.id;\n        settings.settings.applicationName = context.application.name;\n        if (context.application && context.application.runscope && context.application.runscope.bucket) {\n          settings.settings.runscopeBucket = context.application.runscope.bucket;\n        }\n        return settings;\n      });\n  }\n\n  /**\n   * load the connector identified by the key\n   * @param {string} key - the unique key identifer for the connector\n   * @returns {Promise<ConnectorProxy>} - a connector proxy\n   */\n  loadConnector(key) {\n    return Promise.resolve().then(() => {\n      return Context.get()\n        .then((context) => {\n          return this._loadSettings(key, context)\n            .then((settings) => {\n              var proxy = new ConnectorProxy(settings);\n              return proxy.init(context).then(() => {\n                return proxy;\n              });\n            });\n        });\n\n    });\n  }\n}\nexport {\n  Authorization as Authorization\n};\n\nexport\ndefault ConnectorPipeline;\n"],"sourceRoot":"/source/"}
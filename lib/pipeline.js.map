{"version":3,"sources":["pipeline.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;qBACc,SAAS;;;;4BAChB,gBAAgB;;;;0BAI/B,cAAc;;2BACA,eAAe;;;;2BACf,eAAe;;;;6BACR,iBAAiB;;;;;;;;IAIrC,iBAAiB;;;;;AAIV,WAJP,iBAAiB,GAIP;0BAJV,iBAAiB;;AAKnB,QAAI,CAAC,OAAO,GAAG,yBAAO,KAAK,CAAC;AAC1B,SAAG,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;KAC3B,CAAC,CAAC;GACJ;;eARG,iBAAiB;;WASR,uBAAC,GAAG,EAAE,OAAO,EAAE;AACxB,aAAO,YAnBX,gBAAgB,CAmBY,YAAY,CAAC;AACjC,WAAG,EAAE,GAAG;AACR,mBAAW,EAAE,OAAO,CAAC,WAAW,IAAI,MAAM;AAC1C,mBAAW,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG;OACrC,CAAC,CACD,IAAI,CAAC,UAAC,QAAQ,EAAK;AAClB,YAAI,CAAC,QAAQ,EAAE;AACb,gBAAM,IAAI,yBAAO,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,iCAAiC,GAAG,GAAG,CAAC,CAAC;SAC1F;AACD,YAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE;AAC9F,kBAAQ,CAAC,QAAQ,CAAC,cAAc,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC;SACxE;AACD,eAAO,QAAQ,CAAC;OACjB,CAAC,CAAC;KACN;;;;;;;;;WAMU,uBAAC,GAAG,EAAE;;;AACjB,aAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,YAAM;AAClC,eAAO,0BAAQ,GAAG,EAAE,CACjB,IAAI,CAAC,UAAC,OAAO,EAAK;AACjB,iBAAO,MAAK,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CACpC,IAAI,CAAC,UAAC,QAAQ,EAAK;AAClB,gBAAI,KAAK,GAAG,uBAAmB,QAAQ,CAAC,CAAC;AACzC,mBAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAM;AACpC,qBAAO,KAAK,CAAC;aACd,CAAC,CAAC;WACJ,CAAC,CAAC;SACN,CAAC,CAAC;OAEN,CAAC,CAAC;KACJ;;;SA5CG,iBAAiB;;;QA+CJ,aAAa;qBAGjB,iBAAiB","file":"pipeline.js","sourcesContent":["'use strict';\nimport ConnectorProxy from './proxy';\nimport Context from '@hoist/context';\nimport {\n  ConnectorSetting\n}\nfrom '@hoist/model';\nimport Errors from '@hoist/errors';\nimport logger from '@hoist/logger';\nimport Authorization from './Authorization';\n/**\n * Pipeline object for interaction with connectors\n */\nclass ConnectorPipeline {\n  /**\n   * create a new ConnectorPipeline object\n   */\n  constructor() {\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n  _loadSettings(key, context) {\n      return ConnectorSetting.findOneAsync({\n          key: key,\n          environment: context.environment || 'live',\n          application: context.application._id\n        })\n        .then((settings) => {\n          if (!settings) {\n            throw new Errors.connector.request.InvalidError('no settings found with the key ' + key);\n          }\n          if (context.application && context.application.runscope && context.application.runscope.bucket) {\n            settings.settings.runscopeBucket = context.application.runscope.bucket;\n          }\n          return settings;\n        });\n    }\n    /**\n     * load the connector identified by the key\n     * @param {string} key - the unique key identifer for the connector\n     * @returns {Promise<ConnectorProxy>} - a connector proxy\n     */\n  loadConnector(key) {\n    return Promise.resolve().then(() => {\n      return Context.get()\n        .then((context) => {\n          return this._loadSettings(key, context)\n            .then((settings) => {\n              var proxy = new ConnectorProxy(settings);\n              return proxy.init(context).then(() => {\n                return proxy;\n              });\n            });\n        });\n\n    });\n  }\n}\nexport {\n  Authorization as Authorization\n};\n\nexport default ConnectorPipeline;\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["authorization.js"],"names":[],"mappings":"AAAA;;;;;;;;AACA;;;;;;;;;;;;IAKM;;;;;AAIJ,WAJI,aAIJ,CAAY,KAAZ,EAAmB;0BAJf,eAIe;;AACjB,SAAK,MAAL,GAAc,KAAd,CADiB;GAAnB;;;;;;;;;;;eAJI;;wBAeA,KAAK,OAAO,UAAU;;;AACxB,WAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB,IAAyB,KAAzB,CADwB;AAExB,WAAK,MAAL,CAAY,YAAZ,CAAyB,OAAzB,EAFwB;AAGxB,aAAO,mBAAS,OAAT,CACH,KAAK,MAAL,CAAY,SAAZ,GACC,IADD,CACM,YAAM;AACV,qBADU;OAAN,CAFH,EAKJ,OALI,CAKI,QALJ,CAAP,CAHwB;;;;;;;;;;;wBAgBtB,KAAK;AACP,aAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB,CAAP,CADO;;;;;;;;;;;;4BAUF,KAAK,UAAU;;;AACpB,aAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB,CAAP,CADoB;AAEpB,WAAK,MAAL,CAAY,YAAZ,CAAyB,OAAzB,EAFoB;AAGpB,aAAO,mBAAS,OAAT,CACH,KAAK,MAAL,CAAY,SAAZ,GACC,IADD,CACM,YAAM;AACV,sBADU;OAAN,CAFH,EAKJ,OALI,CAKI,QALJ,CAAP,CAHoB;;;;SAzClB;;;kBAqDS","file":"authorization.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\n\n/**\n * accessor class for authorization over a {@link BouncerToken}\n */\nclass Authorization {\n  /**\n   *@param {BouncerToken} token - the underlying bouncer token\n   */\n  constructor(token) {\n    this._token = token;\n  }\n\n  /**\n   * set and save a value against the bouncer token\n   * @param {string} key - the key to save against\n   * @param {object} value - the value to save\n   * @param {function(auth:Authorization)} [callback] - a callback to call after data is saved\n   * @returns {Promise<Authorization} - return the authorization once data has been saved\n   */\n  set(key, value, callback) {\n    this._token.state[key] = value;\n    this._token.markModified('state');\n    return Bluebird.resolve(\n        this._token.saveAsync()\n        .then(() => {\n          return this;\n        }))\n      .nodeify(callback);\n  }\n\n  /**\n   * get a value associated with a key\n   * @param {String} key - the key that the value is saved against\n   * @returns {object}\n   */\n  get(key) {\n    return this._token.state[key];\n  }\n\n  /**\n   * delete a key in a bouncer token\n   * @param {string} key - the key to save against\n   * @param {function(auth:Authorization)} [callback] - a callback to call after data is deleted\n   * @returns {Promise<Authorization} - return the authorization once data has been deleted\n   */\n  delete(key, callback) {\n    delete this._token.state[key];\n    this._token.markModified('state');\n    return Bluebird.resolve(\n        this._token.saveAsync()\n        .then(() => {\n          return this;\n        }))\n      .nodeify(callback);\n  }\n}\n\nexport default Authorization;\n"],"sourceRoot":"/source/"}
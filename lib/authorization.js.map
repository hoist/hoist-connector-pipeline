{"version":3,"sources":["authorization.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;wBACQ,UAAU;;;;;;;;IAKzB,aAAa;;;;;AAIN,WAJP,aAAa,CAIL,KAAK,EAAE;0BAJf,aAAa;;AAKf,QAAI,CAAC,MAAM,GAAG,KAAK,CAAC;GACrB;;eANG,aAAa;;;;;;;;;;WAed,aAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE;;;AACxB,UAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AAC/B,UAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AAClC,aAAO,sBAAS,OAAO,CACnB,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CACtB,IAAI,CAAC,YAAM;AACV,qBAAY;OACb,CAAC,CAAC,CACJ,OAAO,CAAC,QAAQ,CAAC,CAAC;KACtB;;;;;;;;;WAOE,aAAC,GAAG,EAAE;AACP,aAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC/B;;;;;;;;;;WAQK,iBAAC,GAAG,EAAE,QAAQ,EAAE;;;AACpB,aAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC9B,UAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AAClC,aAAO,sBAAS,OAAO,CACnB,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CACtB,IAAI,CAAC,YAAM;AACV,sBAAY;OACb,CAAC,CAAC,CACJ,OAAO,CAAC,QAAQ,CAAC,CAAC;KACtB;;;SAlDG,aAAa;;;qBAqDJ,aAAa","file":"authorization.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\n\n/**\n * accessor class for authorization over a {@link BouncerToken}\n */\nclass Authorization {\n  /**\n   *@param {BouncerToken} token - the underlying bouncer token\n   */\n  constructor(token) {\n    this._token = token;\n  }\n\n  /**\n   * set and save a value against the bouncer token\n   * @param {string} key - the key to save against\n   * @param {object} value - the value to save\n   * @param {function(auth:Authorization)} [callback] - a callback to call after data is saved\n   * @returns {Promise<Authorization} - return the authorization once data has been saved\n   */\n  set(key, value, callback) {\n    this._token.state[key] = value;\n    this._token.markModified('state');\n    return Bluebird.resolve(\n        this._token.saveAsync()\n        .then(() => {\n          return this;\n        }))\n      .nodeify(callback);\n  }\n\n  /**\n   * get a value associated with a key\n   * @param {String} key - the key that the value is saved against\n   * @returns {object}\n   */\n  get(key) {\n    return this._token.state[key];\n  }\n\n  /**\n   * delete a key in a bouncer token\n   * @param {string} key - the key to save against\n   * @param {function(auth:Authorization)} [callback] - a callback to call after data is deleted\n   * @returns {Promise<Authorization} - return the authorization once data has been deleted\n   */\n  delete(key, callback) {\n    delete this._token.state[key];\n    this._token.markModified('state');\n    return Bluebird.resolve(\n        this._token.saveAsync()\n        .then(() => {\n          return this;\n        }))\n      .nodeify(callback);\n  }\n}\n\nexport default Authorization;\n"],"sourceRoot":"/source/"}